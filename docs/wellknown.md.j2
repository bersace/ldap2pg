<!--*- markdown -*-->

<h1>Well-known Privileges</h1>

ldap2pg provides some well-known privileges for recurrent usage. There is **no
warranty** on these privileges. You have to check privileges configuration on
your databases just like you should do with your own code.

The true added-value of well-known privileges is the `inspect` queries
associated and the boilerplate saved for declaring all `GRANT` queries.


## Using Well-known Privileges

Well-known privilege starts and ends with `__`. ldap2pg [disables
privileges](privileges.md#enabling-privilege) starting with `_`. Thus you have
to include well-known privileges in a group to enable them. If two groups
reference the same privilege, it will be deduplicated, don't worry.

``` yaml
privileges:
  ro:
  - __connect__
  - __usage_on_schemas__
  - __select_on_tables__

  rw:
  - ro
  - __insert__
  - __update_on_tables__

  ddl:
  - rw
  - __all_on_schemas__
  - __all_on_tables__

rules:
- grant:
    privilege: ddl
    database: mydb
    schema: __all__
    role: admins
```

Well-known privilege name follows the following loose convention:

- `..._on_all_tables__` is equivalent to `GRANT ... ON ALL TABLES IN SCHEMA ...`.
- `__default_...__` is equivalent to `ALTER DEFAULT PRIVILEGES ... IN SCHEMA ...`.
- `__..._on_tables__` gathers `__..._on_all_tables__` and
  `__default_..._on_tables__`.
- Group starting with `__all_on_...__` is *equivalent* to `ALL PRIVILEGES` in
  SQL.
- A privilege specific to one object type does not have `_on_<type>__` e.g.
  `__delete_on_tables__` is aliased to `__delete__`.

This page does not document the SQL standard and the meaning of each SQL
privileges. You will find the documentation of SQL privileges in [Postgresql
GRANT documentation](https://www.postgresql.org/docs/current/sql-grant.html) and
[ALTER DEFAULT PRIVILEGES
documentation](https://www.postgresql.org/docs/current/sql-alterdefaultprivileges.html).


## Privilege Groups

Next is an extensive, boring, list of all well known privilege groups in
`master`. Each group is documented by its name and the list of included
privilege. Each privilege name point the the detail of privilege definition.

Actually, a group like `__all_on_tables__` is implemented as group of groups.
But for the sake of simplicity, the documentation lists the constructed list
of concrete privileges finally included.

Here we go.
{% for name in groups|sort %}


{# Escape _ as HTML entity because RTD bugs on this. See #440 #}
### Group `{{ name }}`  { #{{ name|slugify }} data-toc-label="{{ name | replace('_', '&#95;') }}" }

Includes:

{% for child in aliases[name]|sort %}
- [`{{ child }}`](#{{ child|slugify }})
{% endfor %}

{% if reverse_aliases[name] is defined %}
Alias: {% for alias in reverse_aliases[name] | sort %}{% if not loop.first %}, {% endif %}`{{ alias }}`{% endfor %}
{% endif %}
{% endfor %}


## Single Privileges

Next is the list of well-known privileges. Each is associated with a `REVOKE`
query and an `inspect` query implementing full inspection of grantees,
including built-in grants to PUBLIC.

For the actual meaning of each SQL privileges, refer to official [PostgreSQL
documentation of
`GRANT`](https://www.postgresql.org/docs/current/static/sql-grant.html)
statement.

{% for name in privileges|sort %}


### Privilege `{{ name }}`  { #{{ name|slugify }} data-toc-label="{{ name | replace('_', '&#95;') }}" }

``` SQL
{{ privileges[name].grant|trim }}
```

{% if reverse_aliases[name] is defined %}
Alias: {% for alias in reverse_aliases[name] | sort %}{% if not loop.first %}, {% endif %}`{{ alias }}`{% endfor %}
{% endif %}
{% endfor %}
