#
# This configuration tries to embed most complexities.
#

postgres:
  databases_query: [postgres, appdb, olddb]

  schemas_query: |
    SELECT nspname FROM pg_catalog.pg_namespace
    WHERE nspname = 'pg_catalog' OR nspname NOT LIKE 'pg_%'

  managed_roles_query: |
    SELECT 'public'
    UNION
    SELECT DISTINCT role.rolname
    FROM pg_roles AS role
    LEFT OUTER JOIN pg_auth_members AS ms ON ms.member = role.oid
    LEFT OUTER JOIN pg_roles AS ldap_roles
      ON ldap_roles.rolname = 'ldap_roles' AND ldap_roles.oid = ms.roleid
    WHERE role.rolname IN ('ldap_roles', 'DBA', 'readers', 'writers', 'owners')
        OR ldap_roles.oid IS NOT NULL
    ORDER BY 1;

  owners_query: |
    SELECT DISTINCT role.rolname
    FROM pg_catalog.pg_roles AS role
    JOIN pg_catalog.pg_auth_members AS ms ON ms.member = role.oid
    JOIN pg_catalog.pg_roles AS owners
      ON owners.rolname = 'owners' AND owners.oid = ms.roleid
    ORDER BY 1;

  roles_blacklist_query: |
    VALUES
    ('postgres'),
    ('pg_*'),
    ('rds_*')
    ;


privileges:
  ro:
  - __connect__
  # Revoking __execute__ on public restores some grants that need a second run
  # to be revoked. Disable it to not handle this case.
  # - __execute__
  - __select_on_tables__
  - __select_on_sequences__
  - __usage_on_schemas__
  - __usage_on_types__

  rw:
  - __temporary__
  - __all_on_tables__
  - __all_on_sequences__

  ddl:
  - __create_on_schemas__


sync_map:
- roles:
  - names:
    - ldap_roles
    - readers
    options: NOLOGIN
    comment: Custom static comment.
  - name: writers
    parent: readers
    options: NOLOGIN
  - name: owners
    parent: writers
    options: NOLOGIN
  - name: DBA
    options: NOLOGIN
  grant:
  - privilege: ro
    role: readers
  - privilege: rw
    role: writers
    schema: public
  - privilege: ddl
    role: owners
    schema: public
  - privilege: rw
    role: owners
    schema: pg_catalog
  - privilege: rw
    role: writers
    database: appdb
    schema: appns
  - privilege: ddl
    role: owners
    database: appdb
    schema: appns

- ldapsearch:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: "(cn=dba)"
    joins:
      member:
        filter: "(mail=*)"
  role:
    name: '{member.cn}'
    options: LOGIN SUPERUSER
    parent:
    - ldap_roles
    - owners
    - DBA
    # Triggers a join.
    comment: "mail: {member.mail}"

- ldapsearch:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: "(cn=team*)"
    on_unexpected_dn: warn
  role:
    name: '{member.cn}'
    options: LOGIN
    parent:
    - ldap_roles
    - writers
