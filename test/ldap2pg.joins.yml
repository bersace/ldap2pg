# This is the ldap2pg sample configuration adapted to use mail attribute
# instead of CN to test the use of joins between LDAP entries.
#

postgres:
  # Scope the database where to purge objects when dropping roles. This is the
  # scope of grant on `__all__` databases.
  databases_query: [postgres, appdb, olddb]
  # List of managed schema. This skip pg_toast, pg_temp1, etc. but not pg_catalog.
  schemas_query: |
    SELECT nspname FROM pg_catalog.pg_namespace
    WHERE nspname = 'pg_catalog' OR nspname NOT LIKE 'pg_%'
  # Return managed roles which can be dropped or revoked.
  managed_roles_query: |
    SELECT 'public'
    UNION
    SELECT DISTINCT role.rolname
    FROM pg_roles AS role
    LEFT OUTER JOIN pg_auth_members AS ms ON ms.member = role.oid
    LEFT OUTER JOIN pg_roles AS ldap_roles
      ON ldap_roles.rolname = 'ldap_roles' AND ldap_roles.oid = ms.roleid
    WHERE role.rolname IN ('ldap_roles', 'readers', 'writers', 'owners')
        OR ldap_roles.oid IS NOT NULL
    ORDER BY 1;

  # Since readers/writer/owners groups are globals, we have a global
  # owners_query.
  owners_query: |
    SELECT DISTINCT role.rolname
    FROM pg_catalog.pg_roles AS role
    JOIN pg_catalog.pg_auth_members AS ms ON ms.member = role.oid
    JOIN pg_catalog.pg_roles AS owners
      ON owners.rolname = 'owners' AND owners.oid = ms.roleid
    ORDER BY 1;


sync_map:
# First, setup static roles and grants
- roles:
  - names:
    - ldap_roles
    - readers
    options: NOLOGIN
    comment: Custom static comment.
  - name: writers
    # Grant reading to writers
    parent: readers
    options: NOLOGIN
  - name: owners
    # Grant read/write to owners
    parent: writers
    options: NOLOGIN

# Now query LDAP to create roles and grant them privileges by parenting.
- ldapsearch:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: "(cn=dba)"
  role:
    name: '{member.mail}'
    options: LOGIN SUPERUSER
    parent:
    - ldap_roles
    - owners
    comment: "Custom comment from LDAP: {dn}"
- ldapsearch:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: "(cn=team*)"
    joins:
      member:
        filter: "(mail=*)"
    on_unexpected_dn: warn
  role:
    name: '{member.mail}'
    options: LOGIN
    parent:
    - ldap_roles
    - writers
- ldapsearch:
    base: ou=groups,dc=ldap,dc=ldap2pg,dc=docker
    filter: |
      (&
        (cn=bi)
        (objectClass=*)
      )
    joins:
      member:
        filter: "(mail=*)"
  role:
    name: '{member.mail}'
    options: LOGIN
    parent:
    - ldap_roles
    - readers
